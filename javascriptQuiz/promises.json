[
  {
    "id": 1,
    "question": "What is a Promise in JavaScript?",
    "options": ["A data structure to hold values", "An object representing the eventual completion or failure of an asynchronous operation", "A method to execute synchronous code", "A JavaScript loop structure"],
    "answer": "An object representing the eventual completion or failure of an asynchronous operation"
  },
  {
    "id": 2,
    "question": "Which of the following states does a Promise have in JavaScript?",
    "options": ["Fulfilled, Rejected, and Pending", "Completed, Aborted, and Pending", "Success, Failure, and Pending", "Resolved, Declined, and Processing"],
    "answer": "Fulfilled, Rejected, and Pending"
  },
  {
    "id": 3,
    "question": "Which method is used to handle the fulfilled state of a Promise?",
    "options": [".resolve()", ".then()", ".finally()", ".catch()"],
    "answer": ".then()"
  },
  {
    "id": 4,
    "question": "What is the correct syntax for creating a new Promise?",
    "options": ["let promise = new Promise()", "let promise = new Promise(function(resolve, reject) {})", "let promise = Promise(function() {})", "let promise = new Promise(resolve, reject => {})"],
    "answer": "let promise = new Promise(function(resolve, reject) {})"
  },
  {
    "id": 5,
    "question": "Which method is used to handle the rejected state of a Promise?",
    "options": [".finally()", ".error()", ".catch()", ".fail()"],
    "answer": ".catch()"
  },
  {
    "id": 6,
    "question": "What happens when a promise is rejected but no .catch() is used?",
    "options": ["The code halts execution", "It throws an uncaught promise rejection error", "It will automatically resolve", "Nothing happens, the rejection is ignored"],
    "answer": "It throws an uncaught promise rejection error"
  },
  {
    "id": 7,
    "question": "Which method runs regardless of the promise's outcome (resolved or rejected)?",
    "options": [".then()", ".finally()", ".catch()", ".always()"],
    "answer": ".finally()"
  },
  {
    "id": 8,
    "question": "What is returned by .then() when it is chained from a promise?",
    "options": ["A new Promise", "The result of the promise", "The result of the .catch() block", "undefined"],
    "answer": "A new Promise"
  },
  {
    "id": 9,
    "question": "How do you handle multiple Promises in parallel and execute a block when all of them are resolved?",
    "options": ["Promise.resolve()", "Promise.all()", "Promise.race()", "Promise.parallel()"],
    "answer": "Promise.all()"
  },
  {
    "id": 10,
    "question": "Which method will resolve once the first of multiple Promises resolves or rejects?",
    "options": ["Promise.all()", "Promise.first()", "Promise.race()", "Promise.some()"],
    "answer": "Promise.race()"
  },
  {
    "id": 11,
    "question": "What will happen if a .catch() is placed after a .then() that doesn't handle errors?",
    "options": ["The error will be caught by .catch()", "The error will be ignored", "The promise chain will break", "The promise will resolve"],
    "answer": "The error will be caught by .catch()"
  },
  {
    "id": 12,
    "question": "What is the use of the Promise.allSettled() method?",
    "options": ["To wait for all promises to resolve", "To return an array of results when all promises resolve or reject", "To return the first resolved promise", "To execute code when all promises are settled"],
    "answer": "To return an array of results when all promises resolve or reject"
  },
  {
    "id": 13,
    "question": "Which of the following does NOT correctly describe a promise?",
    "options": ["Promises can be chained", "Promises provide more readable code than callbacks", "Promises handle both asynchronous and synchronous operations equally", "Promises avoid callback hell"],
    "answer": "Promises handle both asynchronous and synchronous operations equally"
  },
  {
    "id": 14,
    "question": "In which state is a Promise neither fulfilled nor rejected?",
    "options": ["Fulfilled", "Pending", "Rejected", "Settled"],
    "answer": "Pending"
  },
  {
    "id": 15,
    "question": "How can you manually reject a promise in the executor function?",
    "options": ["By calling reject()", "By using throw new Error()", "By calling .catch()", "By returning false"],
    "answer": "By calling reject()"
  },
  {
    "id": 16,
    "question": "How do you convert a callback-based function to a Promise-based function?",
    "options": ["Promise.all()", "Promise.resolve()", "new Promise()", "Promise.race()"],
    "answer": "new Promise()"
  },
  {
    "id": 17,
    "question": "Which of the following methods will reject as soon as any one of the promises rejects?",
    "options": ["Promise.allSettled()", "Promise.race()", "Promise.any()", "Promise.all()"],
    "answer": "Promise.all()"
  },
  {
    "id": 18,
    "question": "Which method is used to return the first promise that resolves, regardless of rejections?",
    "options": ["Promise.race()", "Promise.first()", "Promise.any()", "Promise.some()"],
    "answer": "Promise.any()"
  },
  {
    "id": 19,
    "question": "What happens when you return a value inside .then()?",
    "options": ["The value is discarded", "The value is passed to the next .then()", "The promise gets rejected", "The execution stops"],
    "answer": "The value is passed to the next .then()"
  },
  {
    "id": 20,
    "question": "How can you run promises sequentially (one after another)?",
    "options": ["Use Promise.any()", "Chain .then() methods", "Use Promise.race()", "Use Promise.allSettled()"],
    "answer": "Chain .then() methods"
  },
  {
    "id": 21,
    "question": "What does Promise.resolve() do?",
    "options": ["Creates a promise that immediately resolves with a value", "Creates a promise that immediately rejects with an error", "Creates a promise that never settles", "None of the above"],
    "answer": "Creates a promise that immediately resolves with a value"
  },
  {
    "id": 22,
    "question": "Which method is used to wait for all promises to settle, without short-circuiting when one promise rejects?",
    "options": ["Promise.all()", "Promise.race()", "Promise.allSettled()", "Promise.resolve()"],
    "answer": "Promise.allSettled()"
  },
  {
    "id": 23,
    "question": "What will be logged to the console in the following code?",
    "code": "Promise.resolve(1)\n  .then(x => x + 1)\n  .then(x => { throw new Error('Oops!'); })\n  .catch(err => console.log(err.message))",
    "options": ["1", "2", "Oops!", "undefined"],
    "answer": "Oops!"
  },
  {
    "id": 24,
    "question": "What is the output of the following code?",
    "code": "let promise = new Promise((resolve, reject) => {\n  resolve('Success!')\n}) \npromise.then(result => {\n  console.log(result)\n})",
    "options": ["undefined", "Promise", "Success!", "Error!"],
    "answer": "Success!"
  },
  {
    "id": 25,
    "question": "In promise terminology, what do we call the function that's passed to the Promise() constructor as an argument?",
    "options": ["Executor", "Generator", "Promise maker", "None of the above"],
    "answer": "Executor"
  }
]
