[
  {
    "id": 1,
    "question": "What is a Promise in JavaScript?",
    "options": ["A data structure to hold values", "An object representing the eventual completion or failure of an asynchronous operation", "A method to execute synchronous code", "A JavaScript loop structure"],
    "answer": "An object representing the eventual completion or failure of an asynchronous operation"
  },
  {
    "id": 2,
    "question": "Which of the following states does a Promise have in JavaScript?",
    "options": ["Fulfilled, Rejected, and Pending", "Completed, Aborted, and Pending", "Success, Failure, and Pending", "Resolved, Declined, and Processing"],
    "answer": "Fulfilled, Rejected, and Pending"
  },
  {
    "id": 3,
    "question": "Which method is used to handle the fulfilled state of a Promise?",
    "options": [".resolve()", ".then()", ".finally()", ".catch()"],
    "answer": ".then()"
  },
  {
    "id": 4,
    "question": "What is the correct syntax for creating a new Promise?",
    "options": ["let promise = new Promise()", "let promise = new Promise(function(resolve, reject) {})", "let promise = Promise(function() {})", "let promise = new Promise(resolve, reject => {})"],
    "answer": "let promise = new Promise(function(resolve, reject) {})"
  },
  {
    "id": 5,
    "question": "Which method is used to handle the rejected state of a Promise?",
    "options": [".finally()", ".error()", ".catch()", ".fail()"],
    "answer": ".catch()"
  },
  {
    "id": 6,
    "question": "What happens when a promise is rejected but no .catch() is used?",
    "options": ["The code halts execution", "It throws an uncaught promise rejection error", "It will automatically resolve", "Nothing happens, the rejection is ignored"],
    "answer": "It throws an uncaught promise rejection error"
  },
  {
    "id": 7,
    "question": "Which method runs regardless of the promise's outcome (resolved or rejected)?",
    "options": [".then()", ".finally()", ".catch()", ".always()"],
    "answer": ".finally()"
  },
  {
    "id": 8,
    "question": "What is returned by .then() when it is chained from a promise?",
    "options": ["A new Promise", "The result of the promise", "The result of the .catch() block", "undefined"],
    "answer": "A new Promise"
  },
  {
    "id": 9,
    "question": "How do you handle multiple Promises in parallel and execute a block when all of them are resolved?",
    "options": ["Promise.resolve()", "Promise.all()", "Promise.race()", "Promise.parallel()"],
    "answer": "Promise.all()"
  },
  {
    "id": 10,
    "question": "Which method will resolve once the first of multiple Promises resolves or rejects?",
    "options": ["Promise.all()", "Promise.first()", "Promise.race()", "Promise.some()"],
    "answer": "Promise.race()"
  },
  {
    "id": 11,
    "question": "What will happen if a .catch() is placed after a .then() that doesn't handle errors?",
    "options": ["The error will be caught by .catch()", "The error will be ignored", "The promise chain will break", "The promise will resolve"],
    "answer": "The error will be caught by .catch()"
  },
  {
    "id": 12,
    "question": "What is the use of the Promise.allSettled() method?",
    "options": ["To wait for all promises to resolve", "To return an array of results when all promises resolve or reject", "To return the first resolved promise", "To execute code when all promises are settled"],
    "answer": "To return an array of results when all promises resolve or reject"
  },
  {
    "id": 13,
    "question": "Which of the following does NOT correctly describe a promise?",
    "options": ["Promises can be chained", "Promises provide more readable code than callbacks", "Promises handle both asynchronous and synchronous operations equally", "Promises avoid "callback hell""],
    "answer": "Promises handle both asynchronous and synchronous operations equally"
  },
  {
    "id": 14,
    "question": "In which state is a Promise neither fulfilled nor rejected?",
    "options": ["Fulfilled", "Pending", "Rejected", "Settled"],
    "answer": "Pending"
  },
  {
    "id": 15,
    "question": "How can you manually reject a promise in the executor function?",
    "options": ["By calling reject()", "By using throw new Error()", "By calling .catch()", "By returning false"],
    "answer": "By calling reject()"
  },
  {
    "id": 16,
    "question": "What is React.js?",
    "options": ["A library for building user interfaces", "A framework for server-side applications", "A library for managing databases", "A tool for creating APIs"],
    "answer": "A library for building user interfaces"
  },
  {
    "id": 17,
    "question": "What is the primary purpose of JSX?",
    "options": ["To make HTML elements interactive", "To define components' state", "To write HTML-like syntax in JavaScript", "To manage props in React"],
    "answer": "To write HTML-like syntax in JavaScript"
  },
  {
    "id": 18,
    "question": "Which of the following is NOT a lifecycle method in React class components?",
    "options": ["componentDidMount", "componentWillUnmount", "render", "useState"],
    "answer": "useState"
  },
  {
    "id": 19,
    "question": "How do you pass data from a child component to a parent component?",
    "options": ["Using props", "Using state", "Using callback functions passed as props", "Using React Context"],
    "answer": "Using callback functions passed as props"
  },
  {
    "id": 20,
    "question": "What is the purpose of keys in React lists?",
    "options": ["Keys help React identify which items have changed, are added, or are removed.", "To bind an event to a component", "To add styling to list elements", "To determine the number of list items"],
    "answer": "Keys help React identify which items have changed, are added, or are removed."
  },
  {
    "id": 21,
    "question": "What does the useContext hook do in React?",
    "options": ["It allows you to access props, are added, or are removed.", "It gives access to global state provided by a React context", "It provides an alternative to useState", "It manages component lifecycle methods"],
    "answer": "It gives access to global state provided by a React context"
  },
  {
    "id": 22,
    "question": "Which method is used to prevent unnecessary re-renders in React class components?",
    "options": ["componentDidUpdate", "componentShouldUpdate", "shouldComponentUpdate", "componentWillReceiveProps"],
    "answer": "shouldComponentUpdate"
  },
  {
    "id": 23,
    "question": "What does the React.Fragment component do?",
    "options": ["Provides state management", "Returns multiple elements without adding extra nodes to the DOM", "Binds event listeners to child components", "Handles routing between pages"],
    "answer": "Returns multiple elements without adding extra nodes to the DOM"
  },
  {
    "id": 24,
    "question": "What does React.StrictMode do?",
    "options": ["It ensures that the application is running in production mode", "It helps identify potential issues in an application", "It automatically manages component state", "It optimizes performance in production"],
    "answer": "It helps identify potential issues in an application"
  },
  {
    "id": 25,
    "question": "How do you access props in a functional component?",
    "options": ["this.props", "props (as an argument)", "componentProps", "getProps()"],
    "answer": "props (as an argument)"
  }
]
