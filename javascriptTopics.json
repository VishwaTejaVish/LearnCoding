[
    {
        "id": 1,
        "title": "What is Javacript",
        "description": "JavaScript is a high-level, dynamic programming language primarily used for web development. \nIt allows developers to create interactive and dynamic content on websites, such as animations, form validations, games, and real-time updates. \nIt works alongside HTML (which structures a webpage) and CSS (which styles a webpage) to enhance user experiences. \n\nHere are some key features of JavaScript: \n\nClient-Side Scripting: \nJavaScript is mainly executed in the browser (client-side), allowing web pages to respond to user interactions without needing to reload the page. \n\nInteractivity: \nJavaScript can manipulate the HTML and CSS of a webpage, making it possible to update content, animate elements, handle user input, and create interactive features. \n\nEvent-Driven: \nJavaScript is designed to react to user actions (events) like clicks, form submissions, and keystrokes. \n\nVersatile: \nWhile traditionally used for web development, JavaScript can also be used on servers (with Node.js), in mobile applications, game development, and more. \n\nRich Ecosystem: \nIt has a large community, numerous libraries (e.g., React, Angular, Vue.js), and frameworks that extend its functionality, making it one of the most popular programming languages today."
    },
    {
        "id": 2,
        "title": "Variables",
        "description": "In JavaScript, variables are used to store data values that can be referenced and manipulated throughout a program. You can think of a variable as a container for storing information. \n\nWays to Declare Variables: \nvar: \nThe original way to declare variables in JavaScript. \nHas function scope, meaning it is accessible throughout the entire function in which it's declared. \nIf declared outside a function, it's globally scoped. \nCan be redeclared within the same scope. \n\nlet: \nIntroduced in ES6 (ECMAScript 2015). \nHas block scope, meaning it is only accessible within the block (enclosed in {}) where it's declared. \nCannot be redeclared in the same scope. \n\nconst: \nAlso introduced in ES6. \nLike let, it has block scope. \nHowever, variables declared with const cannot be reassigned after their initial value is set. \nUseful for variables that should remain constant. \n\nVariable Naming Rules: \nVariable names can include letters, numbers, underscores, and dollar signs. \nThey must begin with a letter, underscore (_), or dollar sign ($). \nJavaScript is case-sensitive, so myVariable and MyVariable are different variables."
    },
    {
        "id": 3,
        "title": "Data Types",
        "description": "JavaScript has several data types that represent the different kinds of values that can be stored and manipulated in a program. \nThese are broadly classified into primitive types and non-primitive (reference) types. \n\n1.Primitive Data Types: \nThese are the basic data types in JavaScript and represent single values. They are immutable, meaning their values cannot be altered once assigned. \n\nNumber: \nRepresents both integer and floating-point numbers. \n\nString: \nUsed to represent textual data. Strings are enclosed in single double quotes. \n\nBoolean: \nRepresents one of two values: true or false. Often used in conditional testing. \n\nUndefined: \nA variable that has been declared but not assigned a value is of type undefined. \n\nNull: \nRepresents the intentional absence of any object value. It is used to indicate 'no value.' \n\nSymbol (Introduced in ES6): \nA unique and immutable value, often used to create unique object property keys. \nBigInt (Introduced in ES2020): \nUsed to represent integers larger than the Number type can handle. \n\n2.Non-Primitive (Reference) Data Types: \nThese are data types that are more complex, and they refer to objects that may have properties and methods. \n\nObject: \nA collection of key-value pairs. An object can contain multiple properties and functions (methods). \n\nArray: \nA special type of object used to store ordered lists of values. \n\nFunctions: \nFunctions are also treated as objects in JavaScript, allowing them to be assigned to variables, passed as arguments, or returned from other functions. \n\nType Checking: \nTo check the type of a variable, you can use the typeof operator"
    }
]
