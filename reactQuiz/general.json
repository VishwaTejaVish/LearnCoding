[
  {
    "id": 1,
    "question": "What is the purpose of the virtual DOM in React?",
    "options": ["To provide a direct interaction with the real DOM", "To improve performance by minimizing direct DOM manipulation", "To store data for React components", "To style React components"],
    "answer": "To improve performance by minimizing direct DOM manipulation"
  },
  {
    "id": 2,
    "question": "What does JSX stand for?",
    "options": ["JavaScript Syntax Extension", "JavaScript Exchange", " JavaScript XML", "JavaScript X"],
    "answer": " JavaScript XML"
  },
  {
    "id": 3,
    "question": "Which of the following methods is used to change the state of a React component?",
    "options": ["this.updateState()", "this.changeState()", "this.stateChange()", "this.setState()"],
    "answer": "this.setState()"
  },
  {
    "id": 4,
    "question": "Which of the following is a correct way to pass data from a parent to a child component in React?",
    "options": ["Using state", " Using props", "Using methods", "Using context"],
    "answer": " Using props"
  },
  {
    "id": 5,
    "question": "What does the render() method in a React component do?",
    "options": ["It handles lifecycle events", "It triggers an API call", "It returns JSX to describe the component’s UI", "It updates the state"],
    "answer": "It returns JSX to describe the component’s UI"
  },
  {
    "id": 6,
    "question": "How can you handle side effects in a functional component using React hooks?",
    "options": ["Using useState", "Using useEffect", "Using useContext", "Using useReducer"],
    "answer": "Using useEffect"
  },
  {
    "id": 7,
    "question": "In which lifecycle method would you typically make an API call in a React class component?",
    "options": ["componentDidMount", "render", "componentWillUnmount", "shouldComponentUpdate"],
    "answer": "componentDidMount"
  },
  {
    "id": 8,
    "question": "What is the primary difference between functional and class components in React?",
    "options": ["Class components do not support lifecycle methods", "Functional components can manage state", "Class components use this keyword while functional components don’t", "Functional components must always render UI"],
    "answer": "Class components use this keyword while functional components don’t"
  },
  {
    "id": 9,
    "question": "What hook is used to manage state in a functional component?",
    "options": ["useEffect", "useContext", "useReducer", "useState"],
    "answer": "useState"
  },
  {
    "id": 10,
    "question": "Which of the following is true about props in React?",
    "options": ["Props can only be passed from a child component to a parent component", "Props are mutable", "Props can be used to pass data from a parent to a child component", "Props are only used in functional components"],
    "answer": "Props can be used to pass data from a parent to a child component"
  },
  {
    "id": 11,
    "question": "What is React Fiber?",
    "options": ["A new architecture introduced to make the virtual DOM faster", "A new syntax for defining React components", "A way to manage context in React", "A method for managing state in class components"],
    "answer": "A new architecture introduced to make the virtual DOM faster"
  },
  {
    "id": 12,
    "question": "How do you handle events in React?",
    "options": ["By using on attributes like onClick", "By using addEventListener directly", "By calling handleEvent() method", "By using eventHandling hooks"],
    "answer": "By using on attributes like onClick"
  },
  {
    "id": 13,
    "question": "What is the role of PropTypes in React?",
    "options": ["To manage component lifecycle", "To define types of props a component should receive", "To initialize state in a component", "To render lists of components"],
    "answer": "To define types of props a component should receive"
  },
  {
    "id": 14,
    "question": "How can you pass default props to a component in React?",
    "options": ["By using getDefaultProps()", "By using defaultProps", "By using static defaultProps", "By using this.props.default"],
    "answer": "By using defaultProps"
  },
  {
    "id": 15,
    "question": "What is the correct way to conditionally render a component in React?",
    "options": ["Using if/else inside the render() method", "Using the ternary operator in JSX", "Using switch statements in JSX", "React doesn’t support conditional rendering"],
    "answer": "Using the ternary operator in JSX"
  },
  {
    "id": 16,
    "question": "What is React.js?",
    "options": ["A library for building user interfaces", "A framework for server-side applications", "A library for managing databases", "A tool for creating APIs"],
    "answer": "A library for building user interfaces"
  },
  {
    "id": 17,
    "question": "What is the primary purpose of JSX?",
    "options": ["To make HTML elements interactive", "To define components' state", "To write HTML-like syntax in JavaScript", "To manage props in React"],
    "answer": "To write HTML-like syntax in JavaScript"
  },
  {
    "id": 18,
    "question": "Which of the following is NOT a lifecycle method in React class components?",
    "options": ["componentDidMount", "componentWillUnmount", "render", "useState"],
    "answer": "useState"
  },
  {
    "id": 19,
    "question": "How do you pass data from a child component to a parent component?",
    "options": ["Using props", "Using state", "Using callback functions passed as props", "Using React Context"],
    "answer": "Using callback functions passed as props"
  },
  {
    "id": 20,
    "question": "What is the purpose of keys in React lists?",
    "options": ["Keys help React identify which items have changed, are added, or are removed.", "To bind an event to a component", "To add styling to list elements", "To determine the number of list items"],
    "answer": "Keys help React identify which items have changed, are added, or are removed."
  },
  {
    "id": 21,
    "question": "What does the useContext hook do in React?",
    "options": ["It allows you to access props, are added, or are removed.", "It gives access to global state provided by a React context", "It provides an alternative to useState", "It manages component lifecycle methods"],
    "answer": "It gives access to global state provided by a React context"
  },
  {
    "id": 22,
    "question": "Which method is used to prevent unnecessary re-renders in React class components?",
    "options": ["componentDidUpdate", "componentShouldUpdate", "shouldComponentUpdate", "componentWillReceiveProps"],
    "answer": "shouldComponentUpdate"
  },
  {
    "id": 23,
    "question": "What does the React.Fragment component do?",
    "options": ["Provides state management", "Returns multiple elements without adding extra nodes to the DOM", "Binds event listeners to child components", "Handles routing between pages"],
    "answer": "Returns multiple elements without adding extra nodes to the DOM"
  },
  {
    "id": 24,
    "question": "What does React.StrictMode do?",
    "options": ["It ensures that the application is running in production mode", "It helps identify potential issues in an application", "It automatically manages component state", "It optimizes performance in production"],
    "answer": "It helps identify potential issues in an application"
  },
  {
    "id": 25,
    "question": "How do you access props in a functional component?",
    "options": ["this.props", "props (as an argument)", "componentProps", "getProps()"],
    "answer": "props (as an argument)"
  }
]
