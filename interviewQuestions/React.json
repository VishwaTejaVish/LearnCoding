[
  {
    "id": 1,
    "title": "What is React?",
    "description": "React is a JavaScript library for building user interfaces. It allows developers to create large web applications that can update and render efficiently in response to changing data, without reloading the page.",
    "highlightWords": ["React"]
  },
  {
    "id": 2,
    "title": "What are the major features of React?",
    "description": "JSX: JavaScript XML, a syntax extension that looks similar to HTML but is written in JavaScript. \n\nVirtual DOM: React uses a virtual representation of the DOM to improve performance. \n\nComponents: Building blocks of a React application. \n\nOne-way Data Binding: Data flows in one direction, making the application more predictable. \n\nState and Props: State for managing internal component data and props for passing data between components.",
    "highlightWords": [
      "JSX:",
      "Virtual DOM:",
      "Components:",
      "One-way Data Binding:",
      "State and Props:"
    ]
  },
  {
    "id": 3,
    "title": "What is JSX?",
    "description": "JSX is a syntax extension of JavaScript, which allows you to write HTML directly within JavaScript. It makes the code more readable and easier to write React components.",
    "highlightWords": ["JSX"]
  },
  {
    "id": 4,
    "title": "What is the Virtual DOM?",
    "description": "The Virtual DOM is a lightweight representation of the real DOM. When the state of a component changes, React first updates the Virtual DOM, then it compares the Virtual DOM with the real DOM (using a process called reconciliation) and updates only the parts of the real DOM that have changed.",
    "highlightWords": [""]
  },
  {
    "id": 5,
    "title": "What is the difference between functional and class components?",
    "description": [
      "Class Components: These are ES6 classes that extend React.Component and have a lifecycle and state.\n",
      "class MyComponent extends React.Component { \n render() { \n return <h1>Hello, World!</h1>; \n } \n}",
      "\nFunctional Components: These are simpler, stateless components defined as functions. They used to lack state and lifecycle features, but with React Hooks, functional components can now use state and other React features.\n",
      "const MyComponent = () => { \n return <h1>Hello, World!</h1>; \n};"
    ],
    "highlightWords": ["Class Components:", "Functional Components:"],
    "indices": [1, 3]
  },
  {
    "id": 6,
    "title": "What are React Hooks?",
    "description": "Hooks were added to React in version 16.8. \n\nHooks are functions that let you use state and lifecycle methods in functional components. \n\nSome common hooks:\nuseState: Manages state within functional components. \nuseEffect: Handles side effects like data fetching, subscriptions, or manually changing the DOM. \n\nRules: \n• Hooks can only be called inside React function components. \n• Hooks can only be called at the top level of a component. \n• Hooks cannot be conditional.",
    "highlightWords": [
      "Some common hooks:",
      "useState:",
      "useEffect:",
      "Rules:"
    ]
  },
  {
    "id": 7,
    "title": "What is the purpose of useEffect Hook?",
    "description": "The useEffect hook is used to handle side effects in a functional component. It runs after the render and can be configured to run only on specific state or prop changes, or on every render.",
    "highlightWords": [""]
  },
  {
    "id": 8,
    "title": "What is the difference between state and props?",
    "description": "State: A component's internal data, controlled and managed by the component itself. It can be changed using setState or useState. \n\nProps: Read-only properties passed from a parent component to a child component. They are immutable and used to pass data between components.",
    "highlightWords": ["State:", "Props:"]
  },
  {
    "id": 9,
    "title": "What is the significance of key prop in React?",
    "description": [
      "The key prop helps React identify which items in a list have changed, been added, or removed. It's essential for optimizing rendering and improving the performance of dynamic lists.\n",
      "<ul> \n {items.map(item => ( \n   <li key={item.id}>{item.name}</li> \n ))} \n</ul>"
    ],
    "highlightWords": ["State:", "Props:"],
    "indices": [1]
  },
  {
    "id": 10,
    "title": "What is Redux, and how does it work with React?",
    "description": "Redux is a state management library commonly used with React. It centralizes the application's state in a single store, which can be accessed by any component. \n\nKey concepts in Redux: \nStore: Holds the entire state of the application. \nAction: Describes the event that should change the state. \nReducer: Pure functions that specify how the application's state changes in response to actions.",
    "highlightWords": [
      "Key concepts in Redux:",
      "Store:",
      "Action:",
      "Reducer:"
    ]
  },
  {
    "id": 11,
    "title": "What are Higher-Order Components (HOCs)?",
    "description": "HOCs are functions that take a component and return a new component. They allow code reusability by abstracting common logic into a wrapper.",
    "highlightWords": [
      "Key concepts in Redux:",
      "Store:",
      "Action:",
      "Reducer:"
    ]
  },
  {
    "id": 12,
    "title": "What is the difference between controlled and uncontrolled components?",
    "description": [
      "Controlled Components: These components have their form elements (input, textarea, etc.) controlled by React's state. Their values are managed via state.",
      "const ControlledInput = () => { \n const [value, setValue] = useState(''); \n return <input value={value} onChange={(e) => setValue(e.target.value)} />; \n};",
      "\nUncontrolled Components: These components manage their form values independently using references (refs).",
      "const UncontrolledInput = () => { \n const inputRef = useRef(null); \n return <input ref={inputRef} />; \n};"
    ],
    "highlightWords": ["Controlled Components:", "Uncontrolled Components:"],
    "indices": [1, 3]
  },
  {
    "id": 13,
    "title": "What are React Fragments?",
    "description": [
      "Fragments allow you to group multiple elements without adding extra nodes to the DOM. They avoid adding unnecessary wrapper elements like <div>.",
      "return ( \n <> \n  <h1>Hello</h1> \n  <p>World</p> \n </> \n);"
    ],
    "highlightWords": [""],
    "indices": [1]
  },
  {
    "id": 14,
    "title": "What is Context API?",
    "description": "The Context API allows you to pass data through the component tree without having to pass props down manually at every level. It's useful for sharing global data like themes or user data across components.",
    "highlightWords": [""]
  },
  {
    "id": 15,
    "title": "What is Prop Drilling and how do you avoid it?",
    "description": "Prop drilling refers to passing props through several intermediate components just to get them to a deeply nested component. You can avoid prop drilling by using Context API or Redux for global state management.",
    "highlightWords": [""]
  },
  {
    "id": 16,
    "title": "What is useMemo and useCallback?",
    "description": [
      "useMemo: Memoizes the result of a function, preventing re-calculation unless dependencies change. It optimizes performance for expensive computations.",
      "const calculation = useMemo(() => { \n compute(data)\n}, [data]);",
      "\nuseCallback: Memoizes a function, preventing re-creation unless dependencies change. Useful for avoiding unnecessary re-renders when passing callbacks to child components.",
      "const handleClick = useCallback(() => { \n // handle click \n}, [dependencies]);"
    ],
    "highlightWords": ["useMemo:","useCallback:"],
    "indices":[1,3]
  },
  {
    "id": 17,
    "title": "What is Lazy Loading in React?",
    "description": [
      "Lazy loading refers to dynamically loading components only when they're needed, which improves performance by reducing the initial load time. In React, you can use React.lazy and Suspense for lazy loading components.\n",
      "const LazyComponent = React.lazy(() => import('./MyComponent'));"
    ],
    "highlightWords": [""],
    "indices":[1]
  }
]
