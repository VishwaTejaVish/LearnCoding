[
  {
    "id": 1,
    "title": "What is CSS",
    "description": "CSS (Cascading Style Sheets) is a style sheet language used to describe the appearance and formatting of a document written in HTML or XML. \n\nCSS is essential for controlling the visual layout of web pages, enabling developers to separate content (HTML) from design (CSS). \n\nKey Features of CSS: \n\nStyling Elements: \nCSS controls the color, fonts, spacing, layout, and overall look of HTML elements. \n\nCascading: \nThe term 'cascading' means that multiple style sheets can be applied to the same HTML document. If multiple styles affect the same element, rules are applied in a priority order (from highest to lowest specificity). \n\nSelectors: \nCSS uses selectors to target HTML elements (e.g., by tag name, class, or ID) and apply specific styles. \n\nBox Model: \nCSS uses the box model concept, which includes margins, borders, padding, and the actual content area to define the layout of elements. \n\nResponsive Design: \nCSS helps create responsive web designs that adjust to different screen sizes (mobile, tablet, desktop).",
    "highlightWords": [
      "key features of css:",
      "styling elements:",
      "cascading:",
      "selectors:",
      "box model:",
      "responsive design:"
    ]
  },
  {
    "id": 2,
    "title": "Selectors",
    "description": [
      "CSS selectors are patterns used to select and style HTML elements. They define which elements on the page the CSS rules apply to. \nHere’s an overview of the different types of CSS selectors: \n\n1. Basic Selectors: \nElement Selector (Type Selector): Targets all instances of a specific HTML element.",
      "p { \n color: blue; \n}",
      "This applies to all <p> (paragraph) elements. \n\nID Selector: \nTargets a single unique element with a specific ID. IDs are unique and should only be used once per page.",
      "#header { \n background-color: grey; \n}",
      "This applies to the element with id='header'. \n\nClass Selector: \nTargets all elements with a specified class. Multiple elements can share the same class.",
      ".highlight { \n background-color: yellow; \n}",
      "This applies to all elements with class='highlight'. \n\n2. Attribute Selectors: \nTargets elements with specific attributes or attribute values",
      "input[type='text'] { \n border: 1px solid black; \n}",
      "This applies to <input> elements with the attribute type='text'. \nOther examples: [href], [name='email']. \n\n3. Combinator Selectors: \nDescendant Selector: \nTargets elements that are inside a specified parent element.",
      "div p { \n color: green; \n}",
      "This applies to all <p> elements that are descendants of a <div> element. \n\nChild Selector (>): Targets direct child elements of a specified parent.",
      "ul > li { \n list-style-type: none; \n}",
      "This applies to all direct child <li> elements of a <ul>. \n\nAdjacent Sibling Selector (+): Targets an element that is immediately after a specified element.",
      "h1 + p { \n font-size: 20px; \n}",
      "This applies to the first <p> element immediately following an <h1>. \n\nGeneral Sibling Selector (~): \nTargets all sibling elements after a specified element.",
      "h2 ~ p { \n color: purple; \n}",
      "This applies to all <p> elements after an <h2>, even if they are not directly adjacent. \n\n4. Pseudo-Class Selectors: \nTargets elements based on their state.",
      "a:hover { \n color: red; \n}",
      "This applies to <a> elements when the user hovers over them. \nOther examples: :first-child, :last-child, :nth-child(), :focus, :checked. \n\n5. Pseudo-Element Selectors: \nTargets specific parts of an element.",
      "p::first-line { \n font-weight: bold; \n}",
      "This applies styles to the first line of all paragraphs. \nOther examples: ::before, ::after, ::selection. \n\n6. Grouping Selector: \nMultiple selectors can be grouped together, applying the same styles to different elements.",
      "h1, h2, h3 { \n font-family: Arial, sans-serif; \n}",
      "This applies the same font to all <h1>, <h2>, and <h3> elements. \n\n7. Universal Selector (*): \nTargets all elements on the page.",
      "* { \n margin: 0; \n padding: 0; \n}",
      "This removes default margin and padding from all elements. \n\nExample: Combining Selectors",
      "ul.menu li.active a { \n color: red; \n}",
      "This targets <a> elements inside a <li> element with the class active, which is itself inside a <ul> element with the class menu.",
      "CSS selectors are a powerful way to precisely target and style elements in a webpage!"
    ],
    "indices": [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25],
    "highlightWords": [
      "1. Basic Selectors:",
      "Element Selector (Type Selector):",
      "ID Selector:",
      "Class Selector:",
      "2. Attribute Selectors:",
      "3. Combinator Selectors:",
      "Descendant Selector:",
      "Child Selector (>):",
      "Adjacent Sibling Selector (+):",
      "General Sibling Selector (~):",
      "4. Pseudo-Class Selectors:",
      "Other examples:",
      "5. Pseudo-Element Selectors:",
      "Pseudo-Element Selectors:",
      "6. Grouping Selector:",
      "7. Universal Selector (*):",
      "Example: Combining Selectors"
    ]
  },
  {
    "id": 3,
    "title": "Flexbox",
    "description": [
      "CSS Flexbox (Flexible Box Layout) is a powerful layout model that simplifies aligning and distributing space among items in a container. Flexbox is especially useful for creating one-dimensional layouts (either in a row or column), allowing you to design flexible, responsive layouts that adapt to different screen sizes without complicated floats or positioning. \n\nKey Concepts of Flexbox: \n1. Flex Container: The element on which display: flex is applied. It contains flex items and defines the layout structure for its children.",
      ".container {\r\n  display: flex;\r\n}",
      "2. Flex Items: The direct children of the flex container become flex items, which are laid out in a flexible way.",
      "Flexbox Properties: \n\nFor Flex Container: \n1. display: flex or display: inline-flex: \n• flex makes the element a block-level flex container. \n• inline-flex makes the element an inline-level flex container. \n\n2. flex-direction: Defines the direction in which the flex items are placed. \n• row (default): Items are placed in a row (left to right). \n• row-reverse: Items are placed in a row (right to left). \n• column: Items are placed in a column (top to bottom). \n• column-reverse: Items are placed in a column (bottom to top).",
      ".container {\r\n  flex-direction: row;\r\n}",
      "\n3. justify-content: Aligns flex items along the main axis (horizontally in a row, vertically in a column). \n• flex-start (default): Items are aligned to the start of the flex container. \n• flex-end: Items are aligned to the end. \n• center: Items are centered along the main axis. \n• space-between: Equal spacing between items, with the first item at the start and the last item at the end. \n• space-around: Equal spacing around each item (half-size spaces at the edges). \n• space-evenly: Equal spacing between and around items.",
      ".container {\r\n  justify-content: space-between;\r\n}",
      "\n4. align-items: Aligns flex items along the cross axis (perpendicular to the main axis). \n• stretch (default): Items stretch to fill the container. \n• flex-start: Items are aligned to the start of the cross axis. \n• flex-end: Items are aligned to the end of the cross axis. \n• center: Items are centered along the cross axis. \n• baseline: Items are aligned based on their text baselines.",
      ".container {\r\n  align-items: center;\r\n}",
      "\n5. flex-wrap: Controls whether flex items are forced into a single line or can wrap onto multiple lines. \n• nowrap (default): All flex items are in one line. \n• wrap: Flex items wrap onto multiple lines. \n• wrap-reverse: Flex items wrap onto multiple lines in reverse order.",
      ".container {\r\n  flex-wrap: wrap;\r\n}",
      "\n6. align-content: Aligns flex lines within the flex container when there is extra space on the cross axis (applies only when flex-wrap is used, and there are multiple lines). \n• stretch (default): Lines stretch to fill the container. \n• flex-start: Lines are packed to the start of the container. \n• flex-end: Lines are packed to the end. \n• center: Lines are centered. \n• space-between: Lines are evenly distributed with no space at the edges. \n• space-around: Lines are evenly distributed with space at the edges.",
      ".container {\r\n  align-content: space-between;\r\n}",
      "\nFor Flex Items: \n1. flex-grow: Specifies how much a flex item will grow relative to the rest of the flex items inside the container. \n• 0 (default): The item will not grow. \n• A positive integer: The item will grow based on the available space.",
      ".item {\r\n  flex-grow: 1; /* The item will grow to fill available space */\r\n}",
      "\n2. flex-shrink: Defines how much a flex item will shrink if there is not enough space in the flex container. \n• 1 (default): The item will shrink if necessary. \n• 0: The item will not shrink.",
      ".item {\r\n  flex-shrink: 0; /* The item will not shrink */\r\n}",
      "\n3. flex-basis: Specifies the initial size of a flex item before it grows or shrinks. This can be defined in pixels, percentages, or other units.",
      ".item {\r\n  flex-basis: 100px; /* The item starts with a width of 100px */\r\n}",
      "\n4. align-self: Overrides the align-items property for a specific flex item, allowing for individual alignment. \n• auto: Inherits the container's align-items value. \n• flex-start, flex-end, center, baseline, stretch.",
      ".item {\r\n  align-self: center; /* This specific item will be centered on the cross axis */\r\n}",
      "\nFlexbox Example: \nHere’s an example of a basic flexbox layout:",
      "<div class=\"container\">\r\n  <div class=\"item\">1</div>\r\n  <div class=\"item\">2</div>\r\n  <div class=\"item\">3</div>\r\n</div>",
      ".container {\r\n  display: flex;\r\n  justify-content: space-between; /* Space between the items */\r\n  align-items: center; /* Items are vertically centered */\r\n  height: 200px;\r\n}\r\n\r\n.item {\r\n  background-color: lightblue;\r\n  padding: 10px;\r\n  flex-grow: 1; /* Items grow equally to fill available space */\r\n  margin: 10px;\r\n}",
      "\nIn this example: \n• The container uses display: flex to become a flex container. \n• Items are distributed with space between them (justify-content: space-between), and they are vertically centered with align-items: center. \n• Each item grows equally to fill the available space, thanks to flex-grow: 1.",
      "\nFlexbox vs. Grid: \n• Flexbox is best for one-dimensional layouts (either rows or columns). \n• Grid is better for two-dimensional layouts (rows and columns).",
      "When to Use Flexbox: \n• When you need simple, one-direction (row or column) layouts. \n• For responsive designs where elements need to adapt based on screen size. \n• When you need easy alignment and spacing between elements (e.g., vertically centering elements)."
    ],
    "indices": [1, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 23],
    "highlightWords": [
      "•",
      "Key Concepts of Flexbox:",
      "1. Flex Container:",
      "2. Flex Items:",
      "Flexbox Properties:",
      "For Flex Container:",
      "1. display: flex or display: inline-flex:",
      "2. flex-direction:",
      "row (default):",
      "row-reverse:",
      "column:",
      "column-reverse:",
      "3. justify-content:",
      "flex-start",
      "flex-end:",
      "center:",
      "space-between:",
      "space-around:",
      "space-evenly:",
      "4. align-items:",
      "stretch",
      "flex-start:",
      "flex-end:",
      "center:",
      "baseline:",
      "5. flex-wrap:",
      "nowrap",
      "wrap:",
      "wrap-reverse:",
      "6. align-content:",
      "stretch",
      "flex-start:",
      "flex-end:",
      "center:",
      "space-between:",
      "space-around:",
      "For Flex Items:",
      "1. flex-grow:",
      "2. flex-shrink:",
      "3. flex-basis:",
      "4. align-self:",
      "auto:",
      "Flexbox Example:",
      "Flexbox vs. Grid:",
      "When to Use Flexbox:",
      "In this example:"
    ]
  },
  {
    "id": 4,
    "title": "Box Model",
    "description": [
      "The CSS Box Model is a fundamental concept that defines how elements are sized and spaced on a web page. In the Box Model, each element is treated as a rectangular box, and the overall size of that box depends on content, padding, border, and margin. \n\nHere’s a breakdown of each part of the box model:",
      "1. Content: \n• The innermost part of the box that contains the actual content, such as text, images, or other elements. \n• The width and height properties define the dimensions of the content area.",
      "\n2. Padding: \n• The space between the content and the border of the element. \n• It can be used to add breathing room around the content within the element. \n• Padding can be set individually for each side: padding-top, padding-right, padding-bottom, and padding-left.",
      "padding: 10px; /* Adds 10px padding to all sides */",
      "\n3. Border: \n• The edge surrounding the padding and content. \n• It can be customized in terms of width, style, and color. \n• Border properties can be set individually for each side or as a shorthand.",
      "border: 2px solid black; /* Adds a solid black border with a width of 2px */",
      "\n4. Margin: \n• The outermost space that separates the element from other elements around it. \n• Like padding, margins can be set individually or as a shorthand. \n• Margin values can also be negative, allowing elements to overlap.",
      "margin: 15px; /* Adds 15px of space around the element */",
      "\nExample of the Box Model: \nLet’s say we have the following CSS applied to an element:",
      ".box {\r\n  width: 200px;\r\n  height: 100px;\r\n  padding: 20px;\r\n  border: 5px solid black;\r\n  margin: 10px;\r\n}",
      "\n• Content: 200px wide, 100px high. \n• Padding: 20px on each side, adding a total of 40px to both width and height. \n• Border: 5px on each side, adding a total of 10px to both width and height. \n• Margin: 10px on each side, but this does not affect the size of the element itself. It only adds space around the element.",
      "So, the overall dimensions of the element become: \n• Width: 200px (content) + 40px (padding) + 10px (border) = 250px \n• Height: 100px (content) + 40px (padding) + 10px (border) = 150px",
      "\nBox-Sizing Property: \nThe box-sizing property determines whether the padding and border are included in the element’s total width and height. \n• box-sizing: content-box (default): The width and height only apply to the content, so padding and border are added outside these dimensions. \n• box-sizing: border-box: The width and height include padding and border, meaning the overall size stays the same regardless of padding and border adjustments. \n\nUsing border-box is often preferred, as it makes calculating the dimensions easier.",
      ".box {\r\n  box-sizing: border-box;\r\n}"
    ],
    "indices": [3, 5, 7, 9, 13],
    "highlightWords": [
      "•",
      "1. Content:",
      "2. Padding:",
      "3. Border:",
      "4. Margin:",
      "Example of the Box Model:",
      "Content:",
      "Padding:",
      "Border:",
      "Margin:",
      "Width:",
      "Height:",
      "Box-Sizing Property:",
      "box-sizing: content-box (default):",
      "box-sizing: border-box:"
    ]
  }
]
